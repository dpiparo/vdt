

# Useful Macros to be used later

macro(change_option NAME NEWVAL)
  unset(${NAME} CACHE)
  set(${NAME} ${NEWVAL} CACHE BOOL "Value changed by cmake - probably due to compiler incompatibilities")
endmacro(change_option)


macro(add_exe_and_link  EXENAME FILENAME ADDITIONAL_LIB)
    # no name is lib not present
    set (ADDITIONAL_LIB_NAME "")
    if (NOT APPLE) # in this case u have the framework carbon
      if (${ADDITIONAL_LIB} MATCHES "None")
      else (${ADDITIONAL_LIB} MATCHES "None")
          set (ADDITIONAL_LIB_NAME ${ADDITIONAL_LIB})
      endif (${ADDITIONAL_LIB} MATCHES "None")
    endif (NOT APPLE)

    #link Vc if present
    if(USE_VC)
      add_executable( ${EXENAME} ${FILENAME})
      target_link_libraries(${EXENAME} vdt VcWrapper ${ADDITIONAL_LIB_NAME})
    else(USE_VC)
      add_executable( ${EXENAME} ${FILENAME})
      target_link_libraries(${EXENAME} vdt ${ADDITIONAL_LIB_NAME})
    endif(USE_VC)
endmacro(add_exe_and_link)

# End macro definitions

# configuration options -- you may change them when running cmake ==============
# with 'cmake -D <OPT>=<value> .'

option( DIAG "Build in diagnostic mode - all diagnostic exes (default cache entry: OFF)" OFF)
option( AVX "Use AVX instruction set (default cache entry: OFF)" OFF)
option( BUILD_SHARED_LIBS "Build libraries as SHARED instead of STATIC (default cache entry: ON)" ON)
option( USE_VC "Use Vc library - requires symlink to Vc from ${CMAKE_SOURCE_DIR} (default cache entry: OFF)" OFF)


# determine compiler type and version ==========================================
set(COMPILER_IS_47_GCC false)
set(COMPILER_IS_OLD_GCC false)
set(COMPILER_IS_ICC false)

if(CMAKE_CXX_COMPILER MATCHES "/(icpc|icc)$")
  set(COMPILER_IS_ICC true)
  message(STATUS "Found icc")
elseif(CMAKE_COMPILER_IS_GNUCXX)
  # check the GCC version (taken from Vc library)
   exec_program(${CMAKE_C_COMPILER} ARGS -dumpversion OUTPUT_VARIABLE _gcc_version)
   # some distributions patch their GCC to return nothing or only major and minor version on -dumpversion.
   # In that case we must extract the version number from --version.
   if(NOT _gcc_version OR _gcc_version MATCHES "^[0-9]\\.[0-9]+$")
      exec_program(${CMAKE_C_COMPILER} ARGS --version OUTPUT_VARIABLE _gcc_version)
      string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+" _gcc_version "${_gcc_version}")
      # message(STATUS "GCC Version from --version: ${_gcc_version}")
   endif()
  message(STATUS "Found gcc version ${_gcc_version}")
  
  string(COMPARE LESS "${_gcc_version}" "4.7.0" _old_gcc)
  if(_old_gcc)
    set(COMPILER_IS_OLD_GCC true)
    message(STATUS "You are running gcc older than 4.7, turning off Vc, AVX and DIAG options")
    change_option(USE_VC 0)
    change_option(AVX 0)
    change_option(DIAG 0)
  else(_old_gcc)
    set(COMPILER_IS_47_GCC true)
  endif(_old_gcc)
else()
  message("Unsupported compiler !!!")
endif()

# process options that can be processed here ===================================

# SIMD instructions set---------------------------------------------------------
# same for both compilers
set(SSE_AVX "-msse")

if (AVX)
  message(STATUS "Using AVX extensions!")
  set (SSE_AVX "-mavx")
  if(COMPILER_IS_ICC)
    set(SSE_AVX "-xavx")
  endif(COMPILER_IS_ICC)
endif (AVX)

# To use svml at CERN ----------------------------------------------------------
set (INTEL_SVML_FLAGS "")
if (SVML)
  message (STATUS "Linking SVML library")
  set (INTEL_SVML_FLAGS "-mveclibabi=svml -L/afs/cern.ch/sw/IntelSoftware/linux/x86_64/Compiler/11.1/072/lib/intel64/ -lsvml -lirc")  
endif (SVML)

# Vc setup ---------------------------------------------------------------------

if(USE_VC)
  message(STATUS "VC usage is turned on now, if you do not intend to use it, run 'cmake -D USE_VC=0 .'")
  set (VC_SYMLINK_MSG "To use Vc you must have a (symlink) 'Vc' leading to the Vc rootdir in your ${CMAKE_SOURCE_DIR}")
  #check for files
  set (VC_LIB_NAME "${CMAKE_SOURCE_DIR}/Vc/libVc.a")
  set (VC_HEADER_NAME "${CMAKE_SOURCE_DIR}/Vc/include/Vc/Vc")

  if(NOT EXISTS ${VC_LIB_NAME}) 
    message(STATUS "Vc lib not found at ${VC_LIB_NAME}, turning off Vc usage")
    message(STATUS ${VC_SYMLINK_MSG})
    change_option(USE_VC 0)
  endif(NOT EXISTS ${VC_LIB_NAME})  
  
  if (EXISTS ${VC_LIB_NAME})
    if(NOT EXISTS ${VC_HEADER_NAME}) 
      message(STATUS "Vc header not found at ${VC_HEADER_NAME}, turning off Vc usage")
      message(STATUS ${VC_SYMLINK_MSG})
      change_option(USE_VC 0)
    endif(NOT EXISTS ${VC_HEADER_NAME}) 
  endif(EXISTS ${VC_LIB_NAME})

  
  link_directories( ${CMAKE_SOURCE_DIR}/Vc ) 
endif(USE_VC)

# set compiler options =========================================================

set (LIBTIMING "")
set (LIBTIMINGAPPLE "")
if(DIAG)
  # Library for time measurement: OSx and Linux
  set (LIBTIMING "rt")
  # do not set it if on OSx
  if (APPLE)
    set (LIBTIMINGAPPLE "-framework Carbon")
  endif (APPLE) 
endif(DIAG)

#-------------------------------------------------------------------------------
# Compiler optimisations

set (VECT_OPT "-O3 -ffast-math -ftree-vectorize")
set (VECTORIZER_VERBOSITY "-ftree-vectorizer-verbose=0")
set (CPP11_OPT "-std=gnu++0x")
set (INLINE_OPT " --param vect-max-version-for-alias-checks=50 --param inline-unit-growth=150")
set (VERBOSITY_OPT "-Winline -pedantic")

# compiler dependent changes ---------------------------------------------------
if(COMPILER_IS_ICC)
  set (VECT_OPT "-O2")
  set (VECTORIZER_VERBOSITY "")
  set (INLINE_OPT "")
elseif(COMPILER_IS_OLD_GCC)
  set (VECT_OPT "-O2")
  set (VECTORIZER_VERBOSITY "")
  set (INLINE_OPT "")
  set (VERBOSITY_OPT "")
  set (CPP11_OPT "")
endif()

set (WARNING_FLAGS "-W -Wall -Werror")

set (COMMON_FLAGS "${INTEL_SVML_FLAGS} ${SSE_AVX}  ${INLINE_OPT} ${WARNING_FLAGS}")
set (LIB_FLAGS "${VERBOSITY_OPT} ${VECT_OPT} ${VECTORIZER_VERBOSITY} ${COMMON_FLAGS}")
set (DIAG_FLAGS "${CPP11_OPT} ${COMMON_FLAGS} ${LIBTIMINGAPPLE} -Ofast")

# Locations ====================================================================
# Location of executables
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin )

# Location of sources
set( SRC_DIR ${CMAKE_SOURCE_DIR}/src )

# Location of library
set( LIB_DIR ${CMAKE_SOURCE_DIR}/lib )

# Common Includes
set (INC_DIR ${CMAKE_SOURCE_DIR}/include )


# Install location
INSTALL(FILES
        include/asin.h
        include/atan.h
        include/cos.h
        include/exp.h
        include/identity.h
        include/inv.h
        include/log.h
        include/sincos.h
        include/sin.h
        include/sqrt.h
        include/tan.h
        include/vdtcore_common.h
        include/vdtMath.h        
        DESTINATION include/vdt)

if (BUILD_SHARED_LIBS)
  set (LIBNAME libvdt.so)
else (BUILD_SHARED_LIBS)
  set (LIBNAME libvdt.a)
endif(BUILD_SHARED_LIBS)

INSTALL(FILES
        lib/${LIBNAME}  
        DESTINATION lib)        
        

